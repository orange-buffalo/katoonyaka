buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:0.11.3"
        classpath "com.palantir.gradle.docker:gradle-docker:0.30.0"
        classpath "com.netflix.nebula:nebula-node-plugin:2.0.1"
    }
}

plugins {
    id "java"
    id "com.github.jlouns.cpe" version "0.5.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'org.springframework.boot' version '2.5.6'
}

apply plugin: "com.github.ben-manes.versions"
apply plugin: "com.palantir.docker"
apply plugin: 'nebula.grunt'

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework:spring-test")
    implementation "org.springframework.boot:spring-boot-starter-freemarker"
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation "com.google.guava:guava:19.0"
    implementation "com.google.code.gson:gson"
    implementation "org.apache.commons:commons-lang3"
    implementation 'commons-io:commons-io:2.11.0'
    implementation "javax.servlet:jstl"
    implementation "ch.qos.logback:logback-classic"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "org.eclipse.persistence:org.eclipse.persistence.moxy:2.6.2"
    implementation("com.google.apis:google-api-services-oauth2:v1-rev85-1.19.0")
    implementation "com.jayway.jsonpath:json-path:2.0.0"
    implementation "com.twelvemonkeys.imageio:imageio-jpeg:3.2.1"

    implementation "org.slf4j:jcl-over-slf4j:1.7.12"

    implementation "javax.servlet:javax.servlet-api"
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

grunt {
    workDir = file("${rootDir}/src/main/web")
    colors = true
    bufferOutput = false
}

node {
    nodeModulesDir = file("${rootDir}/src/main/web")
    download = true
    version = "16.13.0"
    npmVersion = "8.1.0"
    distBaseUrl = 'https://nodejs.org/dist'
}

sourceCompatibility = 1.8

def versionSrc = new File("${rootDir}/src/main/resources/templates/global-settings.ftl").text
def matcher = versionSrc =~ /katoonyakaVersion="(.*)"/
def katoonyakaVersion = matcher[0][1]
println "Building Katoonyaka v${katoonyakaVersion}"

task configureGrunt {
    dependsOn "installGrunt", "npmInstall"
}

task buildJs(type:GruntTask) {
    args = ["buildJs", "--katoonyakaVersion=${katoonyakaVersion}"]
    doLast {
        copy {
            from "${rootDir}/src/main/web/dist/js"
            into "${buildDir}/resources/main/public/static/js"
        }
    }
}

task buildCss {
    dependsOn "grunt_buildCss"
    doLast {
        copy {
            from "${rootDir}/src/main/web/dist/css/katoonyaka.css"
            into "${buildDir}/resources/main/public/static/css/"
            rename { String fileName ->
                "katoonyaka.${katoonyakaVersion}.css"
            }
        }
    }
}

task buildFont {
    dependsOn "grunt_buildFont"
    doLast {
        copy {
            from "${rootDir}/src/main/web/dist/fonts/_icons.scss"
            into "${rootDir}/src/main/web/src/sass/katoonyaka/"
        }
    }
}

bootJar {
    dependsOn "buildCss", "buildJs"
}

clean.doFirst {
    delete "${rootDir}/src/main/web/dist/"
}

docker {
    files bootJar.outputs
    dockerfile project.file('src/docker/Dockerfile')
    name "orange-buffalo/katoonyaka"
}
